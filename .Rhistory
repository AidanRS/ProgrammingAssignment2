I
}
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
set_inverse <- function(inverse) I <<- inverse
get_inverse <- function() I
list(set = set, get = get, set_inverse = set_inverse,
get_inverse = get_inverse )
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then cacheSolve
## should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
I <- x$get_Inverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data, ...)
x$set_inverse(I)
I
}
cacheSolve <- function(x, ...) {
I <- x$get_Inverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data, ...)
x$set_inverse(I)
I
}
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function(y) {
x <<- y
I <<- NULL
}
get <- function() x
set_inverse <- function(inverse) I <<- inverse
get_inverse <- function() I
list(set = set, get = get, set_inverse = set_inverse,
get_inverse = get_inverse )
}
makeCacheMatrix(matrix(1:4,2,2))
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix
my_matrix$get()
casheSolve(my_matrix)
CasheSolve(my_matrix)
CacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$get_inverse()
cacheSolve(my_matrix)
cacheSolve <- function(x, ...) {
I <- x$get_inverse()
if(!is.null(I)) {
message("getting cached data")
return(I)
}
data <- x$get()
I <- solve(data, ...)
x$set_inverse(I)
I
}
cacheSolve(my_matrix)
cacheSolve(my_matrix)
